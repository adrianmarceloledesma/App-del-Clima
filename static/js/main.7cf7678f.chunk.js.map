{"version":3,"sources":["components/formulario.js","components/informacion-clima.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","className","onSubmit","getWeather","type","name","placeholder","autoFocus","requiered","required","value","InfoClima","error","temperatura","ciudad","pais","descripcion","humedad","velocidadViento","App","state","obtenerClima","e","a","preventDefault","target","elements","city","country","cityValue","countryValue","ApiURL","fetch","respuesta","json","datos","setState","main","temp","weather","description","humidity","wind","speed","sys","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"6VAiCeA,G,YA9BF,SAACC,GACV,OACI,yBAAKC,UAAU,mBACX,0BAAMC,SAAUF,EAAMG,YAClB,yBAAKF,UAAU,aACZ,2BACEG,KAAK,OACLC,KAAK,OACLC,YAAY,sBACZC,WAAS,EAAEC,WAAS,KAIzB,yBAAKP,UAAU,gBACZ,2BACEG,KAAK,OACLC,KAAK,UACLC,YAAY,uBACZG,UAAQ,KAGb,yBAAKR,UAAU,sBACZ,2BACEG,KAAK,SACLM,MAAM,uB,MCOZC,MA/Bf,SAAoBX,GAEhB,OACI,6BACI,yBAAKC,UAAU,SAIPD,EAAMY,OAAU,2BAAIZ,EAAMY,QAIlC,yBAAKX,UAAU,QAEPD,EAAMa,aACF,6BACI,+CAAkBb,EAAMc,OAAxB,KAAkCd,EAAMe,MACxC,sCAAYf,EAAMgB,aAClB,2CAAiBhB,EAAMa,YAAvB,UACA,uCAAab,EAAMiB,SACnB,oDAA0BjB,EAAMkB,qBCqD7CC,E,4MAtEZC,MAAQ,CACNP,YAAa,GACbG,YAAY,GACZC,QAAQ,GACRC,gBAAgB,GAChBJ,OAAO,GACPC,KAAK,GACLH,MAAM,M,EAKTS,a,uCAAe,WAAMC,GAAN,6BAAAC,EAAA,yDACbD,EAAEE,iBADW,EAKWF,EAAEG,OAAOC,SAA1BC,EALM,EAKNA,KAAMC,EALA,EAKAA,QAGPC,EAAYF,EAAKjB,MACjBoB,EAAeF,EAAQlB,OAG1BmB,IAAaC,EAZH,wBAcJC,EAdI,4DAc0DF,EAd1D,YAcuEC,EAdvE,0EAkBaE,MAAMD,GAlBnB,cAkBJE,EAlBI,iBAsBUA,EAAUC,OAtBpB,QAsBJC,EAtBI,OA0BV,EAAKC,SAAS,CACXvB,YAAYsB,EAAME,KAAKC,KACvBtB,YAAYmB,EAAMI,QAAQ,GAAGC,YAC7BvB,QAAQkB,EAAME,KAAKI,SACnBvB,gBAAgBiB,EAAMO,KAAKC,MAC3B7B,OAAOqB,EAAM9B,KACbU,KAAKoB,EAAMS,IAAIhB,QACfhB,MAAM,OAjCC,wBAsCV,EAAKwB,SAAS,CACZxB,MAAM,uCAvCE,4C,6GA8Cb,OACE,6BACE,6BACE,kBAAC,EAAD,CAAMT,WAAY0C,KAAKxB,eACvB,kBAAC,EAAewB,KAAKzB,a,GA/Db0B,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApD,GACLqD,QAAQrD,MAAMA,EAAMsD,c","file":"static/js/main.7cf7678f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './formulario-estilos.css';\r\n\r\nconst Form = (props) => {\r\n    return(\r\n        <div className=\"contenedor-form\">\r\n            <form onSubmit={props.getWeather}> \r\n                <div className=\"city-name\">\r\n                   <input \r\n                     type=\"text\" \r\n                     name=\"city\" \r\n                     placeholder=\"Nombre de tu Ciudad\"\r\n                     autoFocus  requiered\r\n                    />\r\n                     \r\n                </div>\r\n                <div className=\"country-name\">\r\n                   <input \r\n                     type=\"text\" \r\n                     name=\"country\" \r\n                     placeholder=\"Nombre de tu País\"\r\n                     required\r\n                     />  \r\n                </div>\r\n                <div className=\"boton-obtenerClima\">\r\n                   <input \r\n                     type=\"submit\" \r\n                     value=\"Obtener Clima\"/>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default Form;","import React from 'react';\r\nimport './info-clima.css';\r\n\r\nfunction InfoClima (props){\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"error\">\r\n                {    \r\n             // si props.error(state= error: null) es nulo, osea que no se ingresa bien la ciudad, etc se escribe el state \r\n                // que esta en el 'else'  \r\n                    props.error &&  <p>{props.error}</p>  \r\n                   \r\n                }\r\n            </div>\r\n            <div className=\"info\">\r\n                {\r\n                    props.temperatura &&\r\n                        <div>\r\n                            <p>Localización: {props.ciudad}, {props.pais}</p>\r\n                            <p>Tiempo: {props.descripcion}</p>\r\n                            <p>Temperatura: {props.temperatura} °C</p>\r\n                            <p>Humedad: {props.humedad}</p>\r\n                            <p>Velocidad del Viento: {props.velocidadViento}</p>\r\n                        </div>\r\n            \r\n                   \r\n                    \r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoClima;","import React from 'react';\nimport './App.css';\nimport Form from './components/formulario'\nimport InfoClima from './components/informacion-clima';\n\nclass App extends React.Component {\n   state = {\n     temperatura: '',\n     descripcion:'',\n     humedad:'',\n     velocidadViento:'',\n     ciudad:'',\n     pais:'',\n     error:null,\n    \n   }\n   \n  // la palabra 'async' va de la mano con la otra palabra 'await'\n  obtenerClima = async e => {\n    e.preventDefault();\n\n    // con el 'target.elements' accede a todos los elementos del formulario en donde esta almacenado la propiedad 'name'\n    // name='city'  name='country'\n    const {city, country} = e.target.elements;\n\n    // extrae la propiedad value y asi obtiene el valor de lo que escribe el usuario\n    const cityValue = city.value;\n    const countryValue = country.value;\n   \n     \n    if(cityValue && countryValue){\n          // tipiamos la direccion\n       const ApiURL = `https://api.openweathermap.org/data/2.5/weather?q=${cityValue},${countryValue}\n       &appid=aa3cf694d765215e8c80b0b312c7f7e3&units=metric`;\n\n         // ejecutar una peticion, el navegador tiene una API llamada 'fetch()' que se encarga de esto\n       const respuesta =await fetch(ApiURL) ;\n       //  como la peticion va a tomar tiempo ponemos una palabra clave 'await' y  guardamos la respuesta en una constante\n       \n    //tengo que convertir esa respuesta en un formato que se pueda leer y tambien la palabra clave 'await' porque va tardar\n       const datos = await respuesta.json() ;\n       \n       \n       \n       this.setState({\n          temperatura:datos.main.temp,\n          descripcion:datos.weather[0].description,\n          humedad:datos.main.humidity,\n          velocidadViento:datos.wind.speed,\n          ciudad:datos.name,\n          pais:datos.sys.country,\n          error:null\n       \n       });\n\n    }else{\n       this.setState({\n         error:'ERROR: Revisa los Datos Ingresados'\n       })\n    }\n\n  }\n\n  render(){\n    return (\n      <div>\n        <div >\n          <Form getWeather={this.obtenerClima}/>\n          <InfoClima  {...this.state}/>\n          {/* los '...' es como mandarle todos los objetos del estado como props, en vez de estar escribiendo uno por uno */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}